<#@ template language="C#" hostSpecific="true" #>
<#@ output extension=".autogen.cs" #>
<#@ assembly Name="System.Xml.dll" #>
<#@ assembly Name="System.Data.dll" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(TargetDir)FileHelpers.Tests.dll" #>
<#@ import namespace="FileHelpers" #>
using FileHelpers;
using System.Diagnostics;
using System;

<#
    Process("Data");
#>
<#+
private FluentCode Code = new FluentCode();

public void Process(string folder)
{
    IServiceProvider hostServiceProvider = (IServiceProvider)Host;
    
    EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
    
    /* Retrieve the project in which this template resides. */
    EnvDTE.ProjectItem containingProjectItem = dte.Solution.FindProjectItem(Host.TemplateFile);
    Project project = containingProjectItem.ContainingProject;
    
    ProcessProjectItem((ProjectItem)project.ProjectItems.Item(folder), null);
    
    WriteLine(Code.GenerateCode());
}

public void ProcessProjectItem(ProjectItem projectItem, ProjectItem parent)
{
    if (projectItem.ProjectItems.Count == 0)
    {
        switch(Path.GetFileName(projectItem.get_FileNames(0).ToLower()))
        { 
            case "generatetestdata.tt":
            case "generatetestdata.autogen.cs":
            case "fluentcode.cs":
            case "filetestbase.cs":
                    break;
                default:
                    //if (projectItem.get_FileNames(0).ToLower().EndsWith(".txt"))
                        RenderItemCore(projectItem, parent);
                    break;
        }
    }
    else
    {
        foreach (ProjectItem childItem in projectItem.ProjectItems)
        {
            ProcessProjectItem(childItem, projectItem);
        }
    }
}

private void RenderItemCore(ProjectItem item, ProjectItem parent)
{
    var filename = item.get_FileNames(0);
    var name = Path.GetFileNameWithoutExtension(filename);
    var filepath = ReplaceIgnoringCase(filename, Path.GetDirectoryName(Host.TemplateFile) + @"\", "");
    
    var resultClass = Code.Namespace("FileHelpers.Tests")
                        .Class("ClassesFileTest")
                        .Class(parent.Name, null)
                        .Class(name, "FileTestBase");
    resultClass.AddCode("protected override string GetFullPathName()", resultClass.Level + 1);
    resultClass.AddCode("{", resultClass.Level + 1);
    resultClass.AddCode("return System.IO.Path.Combine(" + "\"" + System.IO.Path.GetDirectoryName(filepath) + "\", \"" + System.IO.Path.GetFileName(filepath) + "\");", resultClass.Level + 2);
    resultClass.AddCode("}", resultClass.Level + 1);

    Code.Namespace("FileHelpers.Tests")
        .Class("FileTest")
        .Class(parent.Name, null)
        .AddStaticReadOnlyPropertyWithBackingField("ClassesFileTest." +parent.Name +"." + name, name);
}

private void WriteLine()
{
    WriteLine(string.Empty);
}
        
public static string ReplaceIgnoringCase(string original, string oldValue, string newValue)
{
    return Replace(original, oldValue, newValue, StringComparison.OrdinalIgnoreCase);
}

public static string Replace(string original, string oldValue, string newValue, StringComparison comparisionType)
{
    string result = original;

    if (!string.IsNullOrEmpty(oldValue))
    {
        int index = -1;
        int lastIndex = 0;

        System.Text.StringBuilder buffer = new System.Text.StringBuilder(original.Length);

        while ((index = original.IndexOf(oldValue, index + 1, comparisionType)) >= 0)
        {
            buffer.Append(original, lastIndex, index - lastIndex);
            buffer.Append(newValue);

            lastIndex = index + oldValue.Length;
        }
        buffer.Append(original, lastIndex, original.Length - lastIndex);

        result = buffer.ToString();
    }

    return result;
}  	
#>